options {
    STATIC=false;
//    FORCE_LA_CHECK=true;
}

// ------------------------------------------------------------------------------------------------

PARSER_BEGIN(GraphParser)
package net.hasor.data.graphql.dsl.parser;
import net.hasor.data.graphql.dsl.*;
import java.util.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

public class GraphParser {
    private Map<String,QueryModel> queryMap = new HashMap<String, QueryModel>();
    private GraphParser (){}
    //
    public static QueryModel parserGraphQL(String queryString) throws ParseException {
        GraphParser parser = new GraphParser(new ByteArrayInputStream(queryString.getBytes()));
        parser.grapthQL();
        return null;
    }
    public static QueryModel parserGraphQL(InputStream inputStream,String encoding) throws ParseException {
        GraphParser parser = new GraphParser(inputStream,encoding);
        parser.grapthQL();
        return null;
    }
}
PARSER_END(GraphParser)

// ------------------------------------------------------------------------------------------------

// Ignore comments
SKIP: {
    <C_SINGLE_COMMENT: "//" (~["\n","\r","\f"])* <EOL>> |
    <C_MULTILINE_COMMENT: "/*" (~[])* "*/"> |
    <SH_SINGLE_COMMENT: "#" (~["\n","\r","\f"])* <EOL>> |
    <WHITESPACE: " " | "\t"> |
    <EOL: "\n" | "\r" | "\f">
}
/* IDENTIFIERS */
TOKEN: {
      < COMMA                   : "," >
    | < OPAR                    : "(" >
    | < CPAR                    : ")" >
    | < OBRA                    : "[" >
    | < CBRA                    : "]" >
    | < OCBR                    : "{" >
    | < CCBR                    : "}" >
    | < COLON                   : ":" >
    | < EQ                      : "=" | "!=" | ">" | ">=" | "<" | "<=" | "like" >
    | < ELLIPSIS                : "..." >
    | < QUOTE_SINGLE            : "'" >
    | < QUOTE_DOUBLE            : "\"" >
}

TOKEN: {
      < FRAGMENT                : "fragment" >
    | < ON                      : "on" >
    | < TRUE                    : "true" >
    | < FALSE                   : "false" >
    | < NULL                    : "null" >
}
// Number token
TOKEN:{
	<#ZERO: "0"> |
	<#DIGIT_NONZERO: ["1"-"9"]> |
	<#DIGIT: (<DIGIT_NONZERO> | <ZERO>) > |
	<NUMBER_INTEGER:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
	> |
	<NUMBER_DECIMAL:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
		("."
			(<DIGIT>)+
			(
				["e","E"]
				("+" | "-")?
				(<DIGIT>)+
			)?
		)
	>
}
TOKEN:{
      <STRING_SINGLE_EMPTY: "''">
    | <STRING_DOUBLE_EMPTY: "\"\"">
    | <#STRING_SINGLE_BODY: (
            (~["'","\\","\r","\n","\f","\t"]) |
            ( "\\" ( "r" | "n" | "f" | "\\" | "/" | "'" | "b" | "t" ) )
        )+>
    | <#STRING_DOUBLE_BODY: (
            (~["\"","\\","\r","\n","\f","\t"]) |
            ( "\\" ( "r" | "n" | "f" | "\\" | "/" | "\"" | "b" | "t" ) )
        )+>
    | <STRING_SINGLE_NONEMPTY: <QUOTE_SINGLE> <STRING_SINGLE_BODY> <QUOTE_SINGLE>>
    | <STRING_DOUBLE_NONEMPTY: <QUOTE_DOUBLE> <STRING_DOUBLE_BODY> <QUOTE_DOUBLE>>
    | <NAME_LITERAL          :   ("$" | "#" | "_" | ["A"-"Z"] | ["a"-"z"] ) ( "." | "-" | "_" | ["0"-"9"] | ["A"-"Z"] | ["a"-"z"] )* >
}


// GrapthQL
void grapthQL() : {
}{
    (
        <FRAGMENT> name() <ON>
        grapthQuery()
    )*
    grapthQuery()
    <EOF>

}

void grapthQuery() : {}{
    (
        udf()
    )?
    queryBody()
}

void udf() : { }{
    name()
    <OPAR>
    (
        queryParam()
        (
            <COMMA>
            queryParam()
        )*
    )?
    <CPAR>
}

void queryParam() : { }{
    stringValue() <EQ>
    (
            LOOKAHEAD(2) udf() | dValue()
    )?
}

void dValue() : { }{
    LOOKAHEAD(2)
    (
        valueForBase()
    ) | (
        LOOKAHEAD(grapthQuery())  grapthQuery() |
        keyString()
    )
}

void valueForBase() : { }{
    nullValue() |
    booleanValue() |
    numberValue() |
    stringValue()
}

void queryBody() : {}{
    (
        LOOKAHEAD(2) queryArrayListBody() |
        LOOKAHEAD(1) queryArrayValueBody() |
        LOOKAHEAD(1) queryObjectBody()
    )
}

void queryArrayListBody() : {}{
    <OBRA>
        <OCBR> (queryFields())? <CCBR>
    <CBRA>
}

void queryArrayValueBody() : {}{
    <OBRA> [
         LOOKAHEAD(2)
         (
             valueForBase()
         ) | (
             keyString()
         )
    ] <CBRA>
}

void queryObjectBody() : { }{
    <OCBR> (queryFields())? <CCBR>
}

void queryFields() : {}{
    queryField()
    (
        <COMMA>
        queryField()
    )*
}

void queryField() : {}{
    stringValue()
    (
        <COLON> dValue()
    )?
}

String name() : {
                                                                  String stringObj;
}{
    (
         <NAME_LITERAL>                                         { return token.image; }
    ) | (
         stringObj = stringValue()                              { return stringObj; }
    )
}

String keyString() : {}{
    (
        "%{" <NAME_LITERAL> "}"                                 { return token.image; }
    ) | (
        <NAME_LITERAL>                                          { return token.image; }
    )
}

String stringValue() : {
                                                                  Token t = null;
}{
    (
        (
            t = <STRING_DOUBLE_EMPTY>
        ) | (
            t = <STRING_DOUBLE_NONEMPTY>
        ) | (
            t = <STRING_SINGLE_EMPTY>
        ) | (
            t = <STRING_SINGLE_NONEMPTY>
        )
    )
                                                                {
                                                                    String image = t.image;
                                                                    return image.substring(1, image.length()-1);
                                                                }
}

Object nullValue() : {}{
	<NULL>                                                      { return null; }
}

Boolean booleanValue() : {}{
    (
        <TRUE>                                                  { return Boolean.TRUE; }
    ) | (
        <FALSE>                                                 { return Boolean.FALSE; }
    )

}

Number numberValue() : {}{
	(
		<NUMBER_DECIMAL>                                        { return new Double(token.image); }
	) | (
		<NUMBER_INTEGER>                                        { return new Long(token.image); }
	)
}