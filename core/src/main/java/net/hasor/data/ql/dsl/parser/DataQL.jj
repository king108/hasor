options {
    STATIC=false;
//    FORCE_LA_CHECK=true;
}

// ------------------------------------------------------------------------------------------------
PARSER_BEGIN(DataQLParser)
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.hasor.data.ql.dsl.parser;
import net.hasor.data.ql.dsl.*;
import net.hasor.data.ql.dsl.domain.EqType;
import java.util.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
/**
 * DataQL DSL Parser
 * @author zyc@hasor.net
 * @version : 2017-03-28
 */
public class DataQLParser {
    private Map<String,QueryModel> queryMap = new HashMap<String, QueryModel>();
    private DataQLParser (){}
    //
    public static QueryModel parserQL(String queryString) throws ParseException {
        DataQLParser parser = new DataQLParser(new ByteArrayInputStream(queryString.getBytes()));
        return parser.dataQL();
    }
    public static QueryModel parserQL(InputStream inputStream,String encoding) throws ParseException {
        DataQLParser parser = new DataQLParser(inputStream,encoding);
        return parser.dataQL();
    }
    //
    private Object buildValueToNull(Object builder,Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder){
            return ((FieldBindingBuilder)builder).withNull();
        }
        if (builder instanceof ParamBindingBuilder){
            return ((ParamBindingBuilder)builder).withNull();
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToBoolean(Object builder,Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder){
            return ((FieldBindingBuilder)builder).withBoolean((Boolean)oriValue);
        }
        if (builder instanceof ParamBindingBuilder){
            return ((ParamBindingBuilder)builder).withBoolean((Boolean)oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToNumber(Object builder,Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder){
            return ((FieldBindingBuilder)builder).withNumber((Number)oriValue);
        }
        if (builder instanceof ParamBindingBuilder){
            return ((ParamBindingBuilder)builder).withNumber((Number)oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToStrig(Object builder,Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder){
            return ((FieldBindingBuilder)builder).withString((String)oriValue);
        }
        if (builder instanceof ParamBindingBuilder){
            return ((ParamBindingBuilder)builder).withString((String)oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToMapping(Object builder,Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder){
            return ((FieldBindingBuilder)builder).withMapping((String)oriValue);
        }
        if (builder instanceof ParamBindingBuilder){
            return ((ParamBindingBuilder)builder).withParam((String)oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToQuery(Object builder,Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder){
            return ((FieldBindingBuilder)builder).withFragment((QueryModel)oriValue);
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withFragment((QueryModel) oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
}
PARSER_END(DataQLParser)

// ------------------------------------------------------------------------------------------------

// Ignore comments
SKIP: {
    <C_SINGLE_COMMENT: "//" (~["\n","\r","\f"])* <EOL>> |
    <C_MULTILINE_COMMENT: "/*" (~[])* "*/"> |
    <SH_SINGLE_COMMENT: "#" (~["\n","\r","\f"])* <EOL>> |
    <WHITESPACE: " " | "\t"> |
    <EOL: "\n" | "\r" | "\f">
}
/* IDENTIFIERS */
TOKEN: {
      < COMMA                   : "," >
    | < OPAR                    : "(" >
    | < CPAR                    : ")" >
    | < OBRA                    : "[" >
    | < CBRA                    : "]" >
    | < OCBR                    : "{" >
    | < CCBR                    : "}" >
    | < COLON                   : ":" >
    | < EQ                      : "=" | "!=" | ">" | ">=" | "<" | "<=" | "like" >
    | < ELLIPSIS                : "..." >
    | < QUOTE_SINGLE            : "'" >
    | < QUOTE_DOUBLE            : "\"" >
}

TOKEN: {
      < FRAGMENT                : "fragment" >
    | < ON                      : "on" >
    | < TRUE                    : "true" >
    | < FALSE                   : "false" >
    | < NULL                    : "null" >
}
// Number token
TOKEN:{
	<#ZERO: "0"> |
	<#DIGIT_NONZERO: ["1"-"9"]> |
	<#DIGIT: (<DIGIT_NONZERO> | <ZERO>) > |
	<NUMBER_INTEGER:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
	> |
	<NUMBER_DECIMAL:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
		("."
			(<DIGIT>)+
			(
				["e","E"]
				("+" | "-")?
				(<DIGIT>)+
			)?
		)
	>
}
TOKEN:{
      <STRING_SINGLE_EMPTY: "''">
    | <STRING_DOUBLE_EMPTY: "\"\"">
    | <#STRING_SINGLE_BODY: (
            (~["'","\\","\r","\n","\f","\t"]) |
            ( "\\" ( "r" | "n" | "f" | "\\" | "/" | "'" | "b" | "t" ) )
        )+>
    | <#STRING_DOUBLE_BODY: (
            (~["\"","\\","\r","\n","\f","\t"]) |
            ( "\\" ( "r" | "n" | "f" | "\\" | "/" | "\"" | "b" | "t" ) )
        )+>
    | <STRING_SINGLE_NONEMPTY: <QUOTE_SINGLE> <STRING_SINGLE_BODY> <QUOTE_SINGLE>>
    | <STRING_DOUBLE_NONEMPTY: <QUOTE_DOUBLE> <STRING_DOUBLE_BODY> <QUOTE_DOUBLE>>
    | <NAME_LITERAL          :   ("$" | "~" | "_" | ["A"-"Z"] | ["a"-"z"] ) ( "." | "-" | "_" | ["0"-"9"] | ["A"-"Z"] | ["a"-"z"] )* >
}



// dataQL
QueryModel dataQL() :{
                                                                  String         tempName  = null;
                                                                  BindingBuilder tempQuery = null;
                                                                  BindingBuilder rootQuery = null;
}{
    (
        <FRAGMENT> tempName = name() <ON>
        tempQuery = grapthQuery(tempName)                       { queryMap.put(tempName,tempQuery.buildQuery()); }
    )*
    rootQuery = grapthQuery(null)
    <EOF>
                                                                { return rootQuery.buildQuery();}
}

BindingBuilder grapthQuery(String queryName) :{
                                                                  BindingBuilder builder = DslUtils.createQuery(queryName);
}{
    (
        udf(builder)
    )?
    queryBody(builder)
                                                                { return builder; }
}

UDFBindingBuilder udf(Object builder) :{
                                                                  String            udfName    = null;
                                                                  UDFBindingBuilder udfBuilder = null;
                                                                  ParamData         udfParam   = null;
}{
    udfName = name()                                            {
                                                                  if (builder instanceof BindingBuilder)
                                                                      { udfBuilder = ((BindingBuilder)builder).byUDF(udfName); }
                                                                  if (builder instanceof FieldBindingBuilder)
                                                                      { udfBuilder = ((FieldBindingBuilder)builder).withUDF(udfName); }
                                                                  if (builder instanceof ParamBindingBuilder)
                                                                      { udfBuilder = ((ParamBindingBuilder)builder).withUDF(udfName); }
                                                                }
    <OPAR>
    (
        udfParam = queryParam()                                 { udfBuilder.addParam(udfParam.getDataParam(),udfParam.getEqType()); }
        (
            <COMMA>
            udfParam = queryParam()                             { udfBuilder.addParam(udfParam.getDataParam(),udfParam.getEqType()); }
        )*
    )?
    <CPAR>                                                      {
                                                                  udfBuilder.asOriginal();
                                                                  return udfBuilder;
                                                                }
}

ParamData queryParam() :{
                                                                  String              paramName    = null;
                                                                  Token               paramEqToken = null;
                                                                  ParamBindingBuilder paramBuilder = null;
                                                                  Object              dataParam   = null;
}{
    paramName = stringValue() paramEqToken = <EQ>               { paramBuilder = DslUtils.createParam(paramName); }
    (
          LOOKAHEAD(2) dataParam = udf(paramBuilder)            { dataParam = ((UDFBindingBuilder)dataParam).asParam(); }
        | dataParam = dValue(paramName,paramBuilder,DataQLToType.ToParam)
    )?
                                                                {
                                                                  if (dataParam == null && queryMap.containsKey(paramName) )
                                                                      { dataParam = null;/*paramBuilder.withParam(paramName);*/ }
                                                                  if (dataParam == null && !queryMap.containsKey(paramName))
                                                                      { dataParam = paramBuilder.withParam(paramName); }
                                                                  EqType eqType = EqType.paserType(paramEqToken.image);
                                                                  return new ParamData((DataParam)dataParam,eqType);
                                                                }
}

Object dValue(String pName,Object builder,DataQLToType toType) : {
                                                                  Object result = null;
}{
    LOOKAHEAD(2)
    (
        result = valueForBase(pName,builder,toType)             { return result; }
    ) | (
        LOOKAHEAD(grapthQuery()) result = grapthQuery(pName)    {
                                                                  if (builder instanceof FieldBindingBuilder)
                                                                      { result = ((BindingBuilder)result).asField(); }
                                                                  if (builder instanceof ParamBindingBuilder)
                                                                      { result = ((BindingBuilder)result).asParam(); }
                                                                }
        | result = keyString()                                  {
                                                                  if (queryMap.containsKey(result))
                                                                      { result = buildValueToQuery(builder,queryMap.get(result),toType); }
                                                                  else
                                                                      { result = buildValueToMapping(builder,result,toType); }
                                                                }
    )
                                                                { return result; }
}

Object valueForBase(String pName, Object builder, DataQLToType toType) : {
                                                                  Object oriValue = null;
}{
      oriValue = nullValue()                                    { return buildValueToNull(builder,oriValue,toType); }
    | oriValue = booleanValue()                                 { return buildValueToBoolean(builder,oriValue,toType); }
    | oriValue = numberValue()                                  { return buildValueToNumber(builder,oriValue,toType); }
    | oriValue = stringValue()                                  { return buildValueToStrig(builder,oriValue,toType); }
}

void queryBody(BindingBuilder builder) : {}{
    (
          LOOKAHEAD(2) queryArrayListBody(builder)
        | LOOKAHEAD(1) queryArrayValueBody(builder)
        | LOOKAHEAD(1) queryObjectBody(builder)
    )
}

void queryArrayListBody(BindingBuilder builder) : {
                                                                  builder = builder.asListObject();
}{
    <OBRA>
        <OCBR> (queryFields(builder))? <CCBR>
    <CBRA>
}

void queryArrayValueBody(BindingBuilder builder) : {
                                                                  builder = builder.asListValue();
                                                                  Object oriValue = null;
}{
    <OBRA> [
         LOOKAHEAD(2)
         (
             oriValue = valueForBase(null,builder,DataQLToType.ToField)
                                                                { builder.addField((DataField)oriValue); }
         ) | (
             oriValue = keyString()                             {
                                                                  DataField field = DslUtils.createField((String)oriValue)
                                                                                            .withMapping((String)oriValue);
                                                                  builder.addField(field);
                                                                }
         )
    ] <CBRA>
}

void queryObjectBody(BindingBuilder builder) : {
                                                                  builder = builder.asObject();
}{
    <OCBR> (queryFields(builder))? <CCBR>
}

void queryFields(BindingBuilder builder) : {
                                                                  DataField dataField = null;
}{
    dataField = queryField()                                    { builder.addField(dataField); }
    (
        <COMMA>
        dataField = queryField()                                { builder.addField(dataField); }
    )*
}

DataField queryField() : {
                                                                  Object              dataField = null;
                                                                  String              fieldName  = null;
                                                                  FieldBindingBuilder builder    = null;
}{
    fieldName = stringValue()                                   { builder = DslUtils.createField(fieldName); }
    (
        <COLON> dataField = dValue(fieldName,builder,DataQLToType.ToField)
    )?
                                                                {
                                                                  if (dataField == null)
                                                                      { dataField = builder.withMapping(fieldName); }
                                                                  return (DataField)dataField;
                                                                }
}

String name() : {
                                                                  String stringObj;
}{
    (
         <NAME_LITERAL>                                         { return token.image; }
    ) | (
         stringObj = stringValue()                              { return stringObj; }
    )
}

String keyString() : {
                                                                  Token t = null;
 }{
    (
        "%{" t = <NAME_LITERAL> "}"                                 { return "%{" + t.image + "}"; }
    ) | (
        t = <NAME_LITERAL>                                          { return t.image; }
    )
}

String stringValue() : {
                                                                  Token t = null;
}{
    (
        (
            t = <STRING_DOUBLE_EMPTY>
        ) | (
            t = <STRING_DOUBLE_NONEMPTY>
        ) | (
            t = <STRING_SINGLE_EMPTY>
        ) | (
            t = <STRING_SINGLE_NONEMPTY>
        )
    )
                                                                {
                                                                  String image = t.image;
                                                                  return image.substring(1, image.length()-1);
                                                                }
}

Object nullValue() : {}{
	<NULL>                                                      { return null; }
}

Boolean booleanValue() : {}{
    (
        <TRUE>                                                  { return Boolean.TRUE; }
    ) | (
        <FALSE>                                                 { return Boolean.FALSE; }
    )

}

Number numberValue() : {}{
	(
		<NUMBER_DECIMAL>                                        { return new Double(token.image); }
	) | (
		<NUMBER_INTEGER>                                        { return new Long(token.image); }
	)
}