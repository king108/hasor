/* DataQLParser.java */
/* Generated By:JavaCC: Do not edit this line. DataQLParser.java */
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.hasor.data.ql.dsl.parser;
import net.hasor.data.ql.dsl.*;
import net.hasor.data.ql.dsl.domain.EqType;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
/**
 * DataQL DSL Parser
 * @author zyc@hasor.net
 * @version : 2017-03-28
 */
public class DataQLParser implements DataQLParserConstants {
    private Map<String, QueryModel> queryMap = new HashMap<String, QueryModel>();
    private DataQLParser() {
    }
    //
    public static QueryModel parserQL(String queryString) throws ParseException {
        DataQLParser parser = new DataQLParser(new ByteArrayInputStream(queryString.getBytes()));
        return parser.dataQL();
    }
    public static QueryModel parserQL(InputStream inputStream, String encoding) throws ParseException {
        DataQLParser parser = new DataQLParser(inputStream, encoding);
        return parser.dataQL();
    }
    //
    private Object buildValueToNull(Object builder, Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder) {
            return ((FieldBindingBuilder) builder).withNull();
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withNull();
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToBoolean(Object builder, Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder) {
            return ((FieldBindingBuilder) builder).withBoolean((Boolean) oriValue);
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withBoolean((Boolean) oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToNumber(Object builder, Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder) {
            return ((FieldBindingBuilder) builder).withNumber((Number) oriValue);
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withNumber((Number) oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToStrig(Object builder, Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder) {
            return ((FieldBindingBuilder) builder).withString((String) oriValue);
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withString((String) oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToMapping(Object builder, Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder) {
            return ((FieldBindingBuilder) builder).withMapping((String) oriValue);
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withParam((String) oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    private Object buildValueToQuery(Object builder, Object oriValue, DataQLToType toType) throws ParseException {
        if (builder instanceof FieldBindingBuilder) {
            return ((FieldBindingBuilder) builder).withFragment((QueryModel) oriValue);
        }
        if (builder instanceof ParamBindingBuilder) {
            return ((ParamBindingBuilder) builder).withFragment((QueryModel) oriValue);
        }
        throw new ParseException("missing return statement in function");
    }
    // dataQL
    final public QueryModel dataQL() throws ParseException {
        String tempName = null;
        BindingBuilder tempQuery = null;
        BindingBuilder rootQuery = null;
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case FRAGMENT: {
                ;
                break;
            }
            default:
                jj_la1[0] = jj_gen;
                break label_1;
            }
            jj_consume_token(FRAGMENT);
            tempName = name();
            jj_consume_token(ON);
            tempQuery = grapthQuery(tempName);
            queryMap.put(tempName, tempQuery.buildQuery());
        }
        rootQuery = grapthQuery(null);
        jj_consume_token(0);
        {
            if ("" != null)
                return rootQuery.buildQuery();
        }
        throw new Error("Missing return statement in function");
    }
    final public BindingBuilder grapthQuery(String queryName) throws ParseException {
        BindingBuilder builder = DslUtils.createQuery(queryName);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY:
        case NAME_LITERAL: {
            udf(builder);
            break;
        }
        default:
            jj_la1[1] = jj_gen;
            ;
        }
        queryBody(builder);
        {
            if ("" != null)
                return builder;
        }
        throw new Error("Missing return statement in function");
    }
    final public UDFBindingBuilder udf(Object builder) throws ParseException {
        String udfName = null;
        UDFBindingBuilder udfBuilder = null;
        ParamData udfParam = null;
        udfName = name();
        if (builder instanceof BindingBuilder) {
            udfBuilder = ((BindingBuilder) builder).byUDF(udfName);
        }
        if (builder instanceof FieldBindingBuilder) {
            udfBuilder = ((FieldBindingBuilder) builder).withUDF(udfName);
        }
        if (builder instanceof ParamBindingBuilder) {
            udfBuilder = ((ParamBindingBuilder) builder).withUDF(udfName);
        }
        jj_consume_token(OPAR);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY: {
            udfParam = queryParam();
            udfBuilder.addParam(udfParam.getDataParam(), udfParam.getEqType());
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    ;
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
                }
                jj_consume_token(COMMA);
                udfParam = queryParam();
                udfBuilder.addParam(udfParam.getDataParam(), udfParam.getEqType());
            }
            break;
        }
        default:
            jj_la1[3] = jj_gen;
            ;
        }
        jj_consume_token(CPAR);
        udfBuilder.asOriginal();
        {
            if ("" != null)
                return udfBuilder;
        }
        throw new Error("Missing return statement in function");
    }
    final public ParamData queryParam() throws ParseException {
        String paramName = null;
        Token paramEqToken = null;
        ParamBindingBuilder paramBuilder = null;
        Object dataParam = null;
        paramName = stringValue();
        paramEqToken = jj_consume_token(EQ);
        paramBuilder = DslUtils.createParam(paramName);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case OBRA:
        case OCBR:
        case TRUE:
        case FALSE:
        case NULL:
        case NUMBER_INTEGER:
        case NUMBER_DECIMAL:
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY:
        case NAME_LITERAL:
        case 35: {
            if (jj_2_1(2)) {
                dataParam = udf(paramBuilder);
                dataParam = ((UDFBindingBuilder) dataParam).asParam();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case OBRA:
                case OCBR:
                case TRUE:
                case FALSE:
                case NULL:
                case NUMBER_INTEGER:
                case NUMBER_DECIMAL:
                case STRING_SINGLE_EMPTY:
                case STRING_DOUBLE_EMPTY:
                case STRING_SINGLE_NONEMPTY:
                case STRING_DOUBLE_NONEMPTY:
                case NAME_LITERAL:
                case 35: {
                    dataParam = dValue(paramName, paramBuilder, DataQLToType.ToParam);
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            break;
        }
        default:
            jj_la1[5] = jj_gen;
            ;
        }
        if (dataParam == null && queryMap.containsKey(paramName)) {
            dataParam = null;/*paramBuilder.withParam(paramName);*/
        }
        if (dataParam == null && !queryMap.containsKey(paramName)) {
            dataParam = paramBuilder.withParam(paramName);
        }
        EqType eqType = EqType.paserType(paramEqToken.image);
        {
            if ("" != null)
                return new ParamData((DataParam) dataParam, eqType);
        }
        throw new Error("Missing return statement in function");
    }
    final public Object dValue(String pName, Object builder, DataQLToType toType) throws ParseException {
        Object result = null;
        if (jj_2_3(2)) {
            result = valueForBase(pName, builder, toType);
            {
                if ("" != null)
                    return result;
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case OBRA:
            case OCBR:
            case STRING_SINGLE_EMPTY:
            case STRING_DOUBLE_EMPTY:
            case STRING_SINGLE_NONEMPTY:
            case STRING_DOUBLE_NONEMPTY:
            case NAME_LITERAL:
            case 35: {
                if (jj_2_2(2147483647)) {
                    result = grapthQuery(pName);
                    if (builder instanceof FieldBindingBuilder) {
                        result = ((BindingBuilder) result).asField();
                    }
                    if (builder instanceof ParamBindingBuilder) {
                        result = ((BindingBuilder) result).asParam();
                    }
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case NAME_LITERAL:
                    case 35: {
                        result = keyString();
                        if (queryMap.containsKey(result)) {
                            result = buildValueToQuery(builder, queryMap.get(result), toType);
                        } else {
                            result = buildValueToMapping(builder, result, toType);
                        }
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                {
                    if ("" != null)
                        return result;
                }
                break;
            }
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }
    final public Object valueForBase(String pName, Object builder, DataQLToType toType) throws ParseException {
        Object oriValue = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NULL: {
            oriValue = nullValue();
            {
                if ("" != null)
                    return buildValueToNull(builder, oriValue, toType);
            }
            break;
        }
        case TRUE:
        case FALSE: {
            oriValue = booleanValue();
            {
                if ("" != null)
                    return buildValueToBoolean(builder, oriValue, toType);
            }
            break;
        }
        case NUMBER_INTEGER:
        case NUMBER_DECIMAL: {
            oriValue = numberValue();
            {
                if ("" != null)
                    return buildValueToNumber(builder, oriValue, toType);
            }
            break;
        }
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY: {
            oriValue = stringValue();
            {
                if ("" != null)
                    return buildValueToStrig(builder, oriValue, toType);
            }
            break;
        }
        default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }
    final public void queryBody(BindingBuilder builder) throws ParseException {
        if (jj_2_4(2)) {
            queryArrayListBody(builder);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case OBRA: {
                queryArrayValueBody(builder);
                break;
            }
            case OCBR: {
                queryObjectBody(builder);
                break;
            }
            default:
                jj_la1[9] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }
    final public void queryArrayListBody(BindingBuilder builder) throws ParseException {
        builder = builder.asListObject();
        jj_consume_token(OBRA);
        jj_consume_token(OCBR);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY: {
            queryFields(builder);
            break;
        }
        default:
            jj_la1[10] = jj_gen;
            ;
        }
        jj_consume_token(CCBR);
        jj_consume_token(CBRA);
    }
    final public void queryArrayValueBody(BindingBuilder builder) throws ParseException {
        builder = builder.asListValue();
        Object oriValue = null;
        jj_consume_token(OBRA);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case NUMBER_INTEGER:
        case NUMBER_DECIMAL:
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY:
        case NAME_LITERAL:
        case 35: {
            if (jj_2_5(2)) {
                oriValue = valueForBase(null, builder, DataQLToType.ToField);
                builder.addField((DataField) oriValue);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case NAME_LITERAL:
                case 35: {
                    oriValue = keyString();
                    DataField field = DslUtils.createField((String) oriValue).withMapping((String) oriValue);
                    builder.addField(field);
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            break;
        }
        default:
            jj_la1[12] = jj_gen;
            ;
        }
        jj_consume_token(CBRA);
    }
    final public void queryObjectBody(BindingBuilder builder) throws ParseException {
        builder = builder.asObject();
        jj_consume_token(OCBR);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY: {
            queryFields(builder);
            break;
        }
        default:
            jj_la1[13] = jj_gen;
            ;
        }
        jj_consume_token(CCBR);
    }
    final public void queryFields(BindingBuilder builder) throws ParseException {
        DataField dataField = null;
        dataField = queryField();
        builder.addField(dataField);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA: {
                ;
                break;
            }
            default:
                jj_la1[14] = jj_gen;
                break label_3;
            }
            jj_consume_token(COMMA);
            dataField = queryField();
            builder.addField(dataField);
        }
    }
    final public DataField queryField() throws ParseException {
        Object dataField = null;
        String fieldName = null;
        FieldBindingBuilder builder = null;
        fieldName = stringValue();
        builder = DslUtils.createField(fieldName);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case COLON: {
            jj_consume_token(COLON);
            dataField = dValue(fieldName, builder, DataQLToType.ToField);
            break;
        }
        default:
            jj_la1[15] = jj_gen;
            ;
        }
        if (dataField == null) {
            dataField = builder.withMapping(fieldName);
        }
        {
            if ("" != null)
                return (DataField) dataField;
        }
        throw new Error("Missing return statement in function");
    }
    final public String name() throws ParseException {
        String stringObj;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NAME_LITERAL: {
            jj_consume_token(NAME_LITERAL);
            {
                if ("" != null)
                    return token.image;
            }
            break;
        }
        case STRING_SINGLE_EMPTY:
        case STRING_DOUBLE_EMPTY:
        case STRING_SINGLE_NONEMPTY:
        case STRING_DOUBLE_NONEMPTY: {
            stringObj = stringValue();
            {
                if ("" != null)
                    return stringObj;
            }
            break;
        }
        default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }
    final public String keyString() throws ParseException {
        Token t = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case 35: {
            jj_consume_token(35);
            t = jj_consume_token(NAME_LITERAL);
            jj_consume_token(CCBR);
            {
                if ("" != null)
                    return "%{" + t.image + "}";
            }
            break;
        }
        case NAME_LITERAL: {
            t = jj_consume_token(NAME_LITERAL);
            {
                if ("" != null)
                    return t.image;
            }
            break;
        }
        default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }
    final public String stringValue() throws ParseException {
        Token t = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRING_DOUBLE_EMPTY: {
            t = jj_consume_token(STRING_DOUBLE_EMPTY);
            break;
        }
        case STRING_DOUBLE_NONEMPTY: {
            t = jj_consume_token(STRING_DOUBLE_NONEMPTY);
            break;
        }
        case STRING_SINGLE_EMPTY: {
            t = jj_consume_token(STRING_SINGLE_EMPTY);
            break;
        }
        case STRING_SINGLE_NONEMPTY: {
            t = jj_consume_token(STRING_SINGLE_NONEMPTY);
            break;
        }
        default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        String image = t.image;
        {
            if ("" != null)
                return image.substring(1, image.length() - 1);
        }
        throw new Error("Missing return statement in function");
    }
    final public Object nullValue() throws ParseException {
        jj_consume_token(NULL);
        {
            if ("" != null)
                return null;
        }
        throw new Error("Missing return statement in function");
    }
    final public Boolean booleanValue() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TRUE: {
            jj_consume_token(TRUE);
            {
                if ("" != null)
                    return Boolean.TRUE;
            }
            break;
        }
        case FALSE: {
            jj_consume_token(FALSE);
            {
                if ("" != null)
                    return Boolean.FALSE;
            }
            break;
        }
        default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }
    final public Number numberValue() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NUMBER_DECIMAL: {
            jj_consume_token(NUMBER_DECIMAL);
            {
                if ("" != null)
                    return new Double(token.image);
            }
            break;
        }
        case NUMBER_INTEGER: {
            jj_consume_token(NUMBER_INTEGER);
            {
                if ("" != null)
                    return new Long(token.image);
            }
            break;
        }
        default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }
    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }
    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }
    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }
    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }
    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }
    private boolean jj_3R_12() {
        if (jj_3R_20())
            return true;
        return false;
    }
    private boolean jj_3R_11() {
        if (jj_3R_19())
            return true;
        return false;
    }
    private boolean jj_3R_6() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_11()) {
            jj_scanpos = xsp;
            if (jj_3R_12()) {
                jj_scanpos = xsp;
                if (jj_3R_13()) {
                    jj_scanpos = xsp;
                    if (jj_3R_14())
                        return true;
                }
            }
        }
        return false;
    }
    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(29)) {
            jj_scanpos = xsp;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                if (jj_scan_token(28)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(32))
                        return true;
                }
            }
        }
        return false;
    }
    private boolean jj_3R_45() {
        if (jj_scan_token(NAME_LITERAL))
            return true;
        return false;
    }
    private boolean jj_3_2() {
        if (jj_3R_5())
            return true;
        return false;
    }
    private boolean jj_3R_48() {
        if (jj_3R_41())
            return true;
        return false;
    }
    private boolean jj_3R_44() {
        if (jj_scan_token(35))
            return true;
        if (jj_scan_token(NAME_LITERAL))
            return true;
        if (jj_scan_token(CCBR))
            return true;
        return false;
    }
    private boolean jj_3R_41() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3R_45())
                return true;
        }
        return false;
    }
    private boolean jj_3R_16() {
        if (jj_3R_22())
            return true;
        return false;
    }
    private boolean jj_3R_47() {
        if (jj_3R_5())
            return true;
        return false;
    }
    private boolean jj_3R_46() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_47()) {
            jj_scanpos = xsp;
            if (jj_3R_48())
                return true;
        }
        return false;
    }
    private boolean jj_3R_15() {
        if (jj_scan_token(NAME_LITERAL))
            return true;
        return false;
    }
    private boolean jj_3R_8() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_15()) {
            jj_scanpos = xsp;
            if (jj_3R_16())
                return true;
        }
        return false;
    }
    private boolean jj_3R_42() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_3()) {
            jj_scanpos = xsp;
            if (jj_3R_46())
                return true;
        }
        return false;
    }
    private boolean jj_3_3() {
        if (jj_3R_6())
            return true;
        return false;
    }
    private boolean jj_3R_43() {
        if (jj_scan_token(COLON))
            return true;
        if (jj_3R_42())
            return true;
        return false;
    }
    private boolean jj_3R_38() {
        if (jj_3R_42())
            return true;
        return false;
    }
    private boolean jj_3R_39() {
        if (jj_3R_22())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_43())
            jj_scanpos = xsp;
        return false;
    }
    private boolean jj_3R_35() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_1()) {
            jj_scanpos = xsp;
            if (jj_3R_38())
                return true;
        }
        return false;
    }
    private boolean jj_3_1() {
        if (jj_3R_4())
            return true;
        return false;
    }
    private boolean jj_3R_40() {
        if (jj_scan_token(COMMA))
            return true;
        if (jj_3R_39())
            return true;
        return false;
    }
    private boolean jj_3R_30() {
        if (jj_3R_22())
            return true;
        if (jj_scan_token(EQ))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_35())
            jj_scanpos = xsp;
        return false;
    }
    private boolean jj_3R_34() {
        if (jj_3R_36())
            return true;
        return false;
    }
    private boolean jj_3R_36() {
        if (jj_3R_39())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_40()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }
    private boolean jj_3R_31() {
        if (jj_scan_token(COMMA))
            return true;
        if (jj_3R_30())
            return true;
        return false;
    }
    private boolean jj_3R_25() {
        if (jj_scan_token(OCBR))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_34())
            jj_scanpos = xsp;
        if (jj_scan_token(CCBR))
            return true;
        return false;
    }
    private boolean jj_3R_29() {
        if (jj_scan_token(NUMBER_INTEGER))
            return true;
        return false;
    }
    private boolean jj_3R_37() {
        if (jj_3R_41())
            return true;
        return false;
    }
    private boolean jj_3R_23() {
        if (jj_3R_30())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_31()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }
    private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_28()) {
            jj_scanpos = xsp;
            if (jj_3R_29())
                return true;
        }
        return false;
    }
    private boolean jj_3R_28() {
        if (jj_scan_token(NUMBER_DECIMAL))
            return true;
        return false;
    }
    private boolean jj_3_5() {
        if (jj_3R_6())
            return true;
        return false;
    }
    private boolean jj_3R_33() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_5()) {
            jj_scanpos = xsp;
            if (jj_3R_37())
                return true;
        }
        return false;
    }
    private boolean jj_3R_32() {
        if (jj_3R_36())
            return true;
        return false;
    }
    private boolean jj_3R_27() {
        if (jj_scan_token(FALSE))
            return true;
        return false;
    }
    private boolean jj_3R_4() {
        if (jj_3R_8())
            return true;
        if (jj_scan_token(OPAR))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23())
            jj_scanpos = xsp;
        if (jj_scan_token(CPAR))
            return true;
        return false;
    }
    private boolean jj_3R_24() {
        if (jj_scan_token(OBRA))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_33())
            jj_scanpos = xsp;
        if (jj_scan_token(CBRA))
            return true;
        return false;
    }
    private boolean jj_3R_19() {
        if (jj_scan_token(NULL))
            return true;
        return false;
    }
    private boolean jj_3R_20() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_26()) {
            jj_scanpos = xsp;
            if (jj_3R_27())
                return true;
        }
        return false;
    }
    private boolean jj_3R_26() {
        if (jj_scan_token(TRUE))
            return true;
        return false;
    }
    private boolean jj_3R_9() {
        if (jj_3R_4())
            return true;
        return false;
    }
    private boolean jj_3R_7() {
        if (jj_scan_token(OBRA))
            return true;
        if (jj_scan_token(OCBR))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_32())
            jj_scanpos = xsp;
        if (jj_scan_token(CCBR))
            return true;
        if (jj_scan_token(CBRA))
            return true;
        return false;
    }
    private boolean jj_3R_18() {
        if (jj_3R_25())
            return true;
        return false;
    }
    private boolean jj_3R_17() {
        if (jj_3R_24())
            return true;
        return false;
    }
    private boolean jj_3R_5() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_9())
            jj_scanpos = xsp;
        if (jj_3R_10())
            return true;
        return false;
    }
    private boolean jj_3_4() {
        if (jj_3R_7())
            return true;
        return false;
    }
    private boolean jj_3R_10() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_4()) {
            jj_scanpos = xsp;
            if (jj_3R_17()) {
                jj_scanpos = xsp;
                if (jj_3R_18())
                    return true;
            }
        }
        return false;
    }
    private boolean jj_3R_14() {
        if (jj_3R_22())
            return true;
        return false;
    }
    private boolean jj_3R_13() {
        if (jj_3R_21())
            return true;
        return false;
    }
    /** Generated Token Manager. */
    public DataQLParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public  Token token;
    /** Next token. */
    public  Token jj_nt;
    private int   jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[21];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x40000, 0x30000000, 0x40, 0x30000000, 0x3c700a00, 0x3c700a00, 0x0, 0x30000a00, 0x3c700000, 0xa00, 0x30000000, 0x0, 0x3c700000, 0x30000000, 0x40, 0x2000, 0x30000000, 0x0, 0x30000000, 0x300000, 0xc000000, };
    }
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] { 0x0, 0x7, 0x0, 0x3, 0xf, 0xf, 0xc, 0xf, 0x3, 0x0, 0x3, 0xc, 0xf, 0x3, 0x0, 0x0, 0x7, 0xc, 0x3, 0x0, 0x0, };
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[5];
    private       boolean   jj_rescan = false;
    private       int       jj_gc     = 0;
    /** Constructor with InputStream. */
    public DataQLParser(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public DataQLParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new DataQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }
    /** Constructor. */
    public DataQLParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new DataQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }
    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }
    /** Constructor with generated Token Manager. */
    public DataQLParser(DataQLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }
    /** Reinitialise. */
    public void ReInit(DataQLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }
    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }
    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }
    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }
    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }
    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int   jj_kind       = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;
    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }
    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[36];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 21; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 36; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }
    /** Enable tracing. */
    final public void enable_tracing() {
    }
    /** Disable tracing. */
    final public void disable_tracing() {
    }
    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 5; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }
    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }
    static final class JJCalls {
        int     gen;
        Token   first;
        int     arg;
        JJCalls next;
    }
}
